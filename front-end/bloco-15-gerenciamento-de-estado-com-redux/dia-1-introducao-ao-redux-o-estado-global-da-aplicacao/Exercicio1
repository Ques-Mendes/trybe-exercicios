<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <script src="https://unpkg.com/redux@latest/dist/redux.min.js"></script>
    <style>
      body {
        height: 100vh;
        margin: 0;
        padding: 0;
      }

      #container {
        height: 100%;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
      }

      button {
        height: 50px;
        width: 200px;
      }
    </style>
  </head>
  <body>
    <div id="container">
      <p>Color: <span id="value">white</span></p>
      <button id="previous">Previous color</button>
      <button id="next">Next color</button>
      <button id="random">Random color</button>
    </div>
    <script>
      // 1.Crie uma store para a nossa aplicação.
      const store = Redux.createStore(reducer);      
      const ESTADO_INICIAL = {
        colors: ['white', 'black', 'red', 'green', 'blue', 'yellow'],
        index: 0,
      };
      // Função que gera cores aleatórias:
    function criarCor() {
      const oneChar = ['1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];
      let cor = '#';
      const aleatorio = () => Math.floor(Math.random() * oneChar.length);
      for (let i = 0; i < 6; i += 1) {
        cor += oneChar[aleatorio()];
      }
      return cor;
    }
      // 2.Crie um reducer, implementando um switch retornando apenas o estado inicial como default
      // 3.Incremente o switch criado no exercício anterior com as actions NEXT_COLOR e PREVIOUS_COLOR
      // essas actions devem alterar o valor index, as posições devem iniciar em 0 e não podem exceder a numeração do último item do array.
      const myReducer = (state = ESTADO_INICIAL, action) => {
        switch (action.type) {
          case 'NEXT_COLOR':
            return {
              ...state,
              index: state.index === state.colors.length -1 ? 0 : state.index + 1,
            };
          case 'PREVIOUS_COLOR':
            return {
              ...state,
              index: state.index === 0 ? state.colors.length -1 : state.index -1,
            };
          default:
            return state;
        }
      };
      // 4.Crie eventListeners que escutam os cliques de cada botão, o Previous color e o Next color ,
      // e realizam um dispatch com o respectivo action.type de cada
      document.getElementById('next').addEventListener('click', () => {
        store.dispatch({ type: 'NEXT_COLOR' });
      });
      document.getElementById('previous').addEventListener('click', () => {
        store.dispatch({ type: 'PREVIOUS-COLOR' });
      });
      document.getElementById('random').addEventListener('click', () => {
        store.dispatch({ typ: 'RANDOM_COLOR' });
      });
      // 5.Faça o subscribe da store, alterando o innerHTML da tag com id value para a cor atual e o style do elemento com id container .
      store.subscribe(() => {
        const { colors, index } = store.getState();
        document.getElementById('value').innerHTML = colors[index];
        document.getElementById('container').style.background = colors[index];
      });
      const store = Redux.createStore(myReducer);
    </script>
  </body>
</html>